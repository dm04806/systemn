Needs to implement [] in order to encode such things:

(=) :: {A :: Type} (a :: A) :: A -> Type :=
| eqrefl :: a = a

(\/) :: (A B :: Type) -> Type :=
| left :: A -> A \/ B
| right :: B -> A \/ B

False :: Type :=

True :: Type := | I :: True

[~) :: Type -> Type
~ P := P -> False

bool :: Type :=
| true :: bool
| false :: bool

Class Eq (A :: Type) :=
| (==) :: (a b :: A) -> a = b \/ ~ a = b

(*
Generating:

ClassEq (A :: Type) :: Type :=
| isClassEq :: ((==) :: (a b :: A) -> a = b \/ ~ a = b) -> ClassEq A

(==) :: {A :: Type} -> [Eq A] -> (a b :: A) -> a = b \/ ~ a = b
(==) {A} [isClassEq (==)] a b := a == b
*)

Class Monoid (A :: Type) :=
| op :: A -> A -> A
| assoc :: (a b c :: A) -> op (op a b) c = op a (op b c)

(*
Generating:

ClassMonoid (A :: Type) :=
| isMonoid :: (op :: A -> A -> A) -> (assoc :: (a b c :: A) -> op (op a b) c = op a (op b c)) -> ClassMonoid A

op :: {A :: Type} -> [Monoid A] -> A -> A -> A
op {A} [isMonoid op _] := op

assoc :: {A :: Type} -> [H :: Monoid A] -> (a b c :: A) -> op {A} [H] (op {A} [H] a b) c = op {A} [H] a (op {A} [H] b c)
assoc {A} [isMonoid op assoc] a b c := assoc
*)

(&&) :: Bool -> Bool -> Bool
false && _ := false
_ && false := false
true && true := true

Instance Monoid Bool :=
| op := (&&)

(* here the system should ask for a term of the type *)

(||) :: Bool -> Bool -> Bool
true && _ := true
_ && true := true
false && false := false

Instance Monoid Bool :=
| op := (||)

(* here the system should ask for a term of the type *)

Class Ord (A :: Type) :=
| (<) :: A -> A -> Type
| (>) :: A -> A -> Type := \ x y -> y < x
| lt_neq :: (a b :: A) -> a < b -> ~ a = b
| (=?=) :: (a b :: A) -> a < b \/ a = b \/ a > b

(Ord A) => Instance Eq A :=
     	   | (==) := (\ a b -> match a =?= b with
                                | left prf := right (lt_neq a b prf)
				| right (left prf) -> left prf
				| right (right prf) -> right (lt_neq b a prf))

(*

EqFromOrd :: {A :: Type} -> [Ord A] -> Eq A
EqFromOrd {A} [H] := isEq (\ a b -> match a =?= b with
                                | left prf := right (lt_neq a b prf)
				| right (left prf) -> left prf
				| right (right prf) -> right (lt_neq b a prf))

*)

(C1 A) => Class C2 (A :: T) :=
          | a1 :: T1

(*
ClassC2 (A :: T) [C1 A] :=
isClassC2 :: (a1 :: T1) -> isClassC2

a1 :: {A :: T} -> [H :: C1 A] -> [C2 A [H]] -> T1
a1 {A} -> [H] -> [isClassC2 a1] := a1
*)

-----------------------------------------------------------------------------------------

The question is: based on this [] quantification, can one reconstruct the Domain / Subdomain / Category of Axioms ??
Might needs more instrumentalization ...
Need to deal with representation


Category := a typeclass
can the Category actually provides the constructor for the representation ?
it can define the constructors as types, implemented with inductive type at domain level (ex: acosh of ArcHyperbolicFunctionCategory
)

Class ArcHyperbolicFunctionCategory (A :: Type) :=
| acosh :: A -> A (* this is the definition of a constructor that any type implementing ArcHyperbolicFunctionCategory must provide *)

Class Logic A :=
| and :: A -> A -> A
| or :: A -> A -> A
| not :: A -> A -> A
| semantics :: A -> Type
(* *)

(Logic A) => ClassicalLogic A :=
| exludemiddle :: (P :: A) -> semantics (or P (not P))

Domain := a type
with possibly a representation (data structure, basically in case of ), with therefore a coercion from/to string
ex: Integer (possible an Obj)

Subdomain := a type + a (decidable) constraint
ex: PositiveInteger :: Type := (x :: Integer) -> [ x > 0 ] -> PositiveInteger
(but this is more a )

